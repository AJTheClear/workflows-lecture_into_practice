name: Main workflow
on: push
env:
  docker_username: ajtheclear
  docker_password: ${{ secrets.GITHUB_TOKEN }}
  GIT_COMMIT: ${{ github.sha }}
jobs:
  Snyk_Scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r component-test/requirements.txt

      - name: Install Snyk
        run: npm install -g snyk

      - name: Run Snyk test
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk test --file=component-test/requirements.txt
  SonarCloud_Scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK (if you're using Java, adjust as needed for your project)
        uses: actions/setup-java@v4
        with:
          java-version: '11'

      - name: Cache SonarCloud dependencies
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar-cache-${{ hashFiles('**/*.java') }}  # Modify if needed
          restore-keys: |
            ${{ runner.os }}-sonar-cache-

      - name: Set up SonarCloud
        uses: SonarSource/sonarcloud-github-action@v2.0
        with:
          sonar-token: ${{ secrets.SONAR_TOKEN }}  # Store your SonarCloud token in GitHub secrets

      - name: Run SonarCloud analysis
        run: |
          # You might need to adjust this command depending on your project structure
          sonar-scanner
  Build:
    runs-on: ubuntu-latest
    container: gradle:6-jdk11
    needs: [Snyk_Scan, SonarCloud_Scan]
    steps:
      - name: Clone down repository
        uses: actions/checkout@v4       
      - name: Build application
        run: ci/build-app.sh
      - name: Test
        run: ci/unit-test-app.sh
      - name: Upload repo
        uses: actions/upload-artifact@v4
        with: 
          name: code
          path: .
  Linting:
    runs-on: ubuntu-latest
    needs: [Build]
    steps:
      - name: Download code
        uses: actions/download-artifact@v4
        with:
          name: code
          path: .
      - name: run linting
        uses: super-linter/super-linter/slim@v5 
        env:
          DEFAULT_BRANCH: main
          # To report GitHub Actions status checks
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  Docker-image:
    runs-on: ubuntu-latest
    needs: [Build]
    permissions:
      packages: write
    steps:
      - name: Download code
        uses: actions/download-artifact@v4
        with:
          name: code
          path: .
      - name: build docker
        run: bash ci/build-docker.sh
      - name: push docker
        run: bash ci/push-docker.sh